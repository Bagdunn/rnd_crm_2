# Технічне завдання - CRM система управління компонентами R&D

## Загальний опис
Веб-додаток для управління компонентами та інструментами в R&D відділі. Система повинна забезпечувати облік, пошук, списання компонентів та управління закупівлями.

## Технічний стек
- **Backend**: Node.js + Express
- **База даних**: PostgreSQL
- **Frontend**: Мінімалістичний HTML/CSS/JS (або React при необхідності)
- **Розгортання**: Docker + docker-compose для легкого розгортання

## Структура бази даних

### Таблиця `categories`
```sql
- id (SERIAL PRIMARY KEY)
- name (VARCHAR) -- "Компоненти" / "Інструменти"
- created_at (TIMESTAMP)
```

### Таблиця `items`
```sql
- id (SERIAL PRIMARY KEY)
- category_id (INTEGER REFERENCES categories)
- name (VARCHAR NOT NULL)
- description (TEXT)
- quantity (INTEGER DEFAULT 0)
- location (VARCHAR) -- розташування
- properties (JSONB) -- гнучкі властивості для фільтрації
- created_at (TIMESTAMP)
- updated_at (TIMESTAMP)
```

### Таблиця `presets`
```sql
- id (SERIAL PRIMARY KEY)
- name (VARCHAR NOT NULL) -- "FPV дрон"
- description (TEXT)
- created_at (TIMESTAMP)
```

### Таблиця `preset_items`
```sql
- id (SERIAL PRIMARY KEY)
- preset_id (INTEGER REFERENCES presets)
- item_name (VARCHAR) -- назва потрібного компоненту
- quantity_needed (INTEGER)
- notes (TEXT)
```

### Таблиця `transactions`
```sql
- id (SERIAL PRIMARY KEY)
- item_id (INTEGER REFERENCES items)
- type (VARCHAR) -- "withdrawal" / "addition"
- quantity (INTEGER)
- purpose (TEXT) -- для чого забрали
- user_name (VARCHAR) -- хто забрав
- created_at (TIMESTAMP)
```

### Таблиця `purchase_requests`
```sql
- id (SERIAL PRIMARY KEY)
- item_name (VARCHAR NOT NULL)
- quantity (INTEGER NOT NULL)
- description (TEXT)
- deadline (DATE)
- status (VARCHAR DEFAULT 'pending') -- pending/approved/completed/cancelled
- requester (VARCHAR)
- notes (TEXT)
- created_at (TIMESTAMP)
- completed_at (TIMESTAMP)
```

## Функціональні вимоги

### 1. Головна сторінка
- Дві вкладки: "Компоненти" та "Інструменти"
- Перемикання між категоріями без перезавантаження
- Лічильник загальної кількості предметів у кожній категорії

### 2. Список компонентів/інструментів
**Відображення:**
- Таблиця з колонками: Назва, Кількість, Розташування, Властивості, Дії
- Пагінація (20-50 елементів на сторінку)
- Індикатор низької кількості (менше 5 шт - помаранчевий, 0 шт - червоний)

**Фільтрація:**
- Пошук по назві
- Фільтр по розташуванню (dropdown)
- Фільтр по властивостях (динамічні фільтри на основі JSONB)
- Фільтр по кількості (є в наявності / закінчується / немає)

### 3. Додавання компоненту
**Форма:**
- Назва (обов'язкове)
- Опис
- Кількість
- Розташування (текстове поле з автодоповненням)
- Властивості (динамічні поля ключ-значення)

### 4. Списання компонентів
**Функціонал:**
- Кнопка "Списати" біля кожного компоненту
- Модальне вікно з полями:
  - Кількість для списання
  - Мета використання
  - Ім'я користувача
- Автоматичне зменшення кількості
- Лог всіх операцій списання

### 5. Пресети
**Управління пресетами:**
- Сторінка зі списком пресетів
- Додавання нового пресету
- Редагування існуючих пресетів
- Кожен пресет містить список потрібних компонентів з кількістю

**Пошук по пресету:**
- Вибір пресету з dropdown
- Відображення таблиці: Компонент, Потрібно, Є на складі, Статус
- Кольорове кодування: зелений (достатньо), жовтий (мало), червоний (немає)
- Масове списання доступних компонентів з пресету

### 6. Закупівлі
**Створення запиту:**
- Форма з полями: назва компоненту, кількість, опис, дедлайн
- Можливість створити запит з пресету (автозаповнення відсутніх компонентів)

**Управління запитами:**
- Окрема сторінка зі списком запитів
- Фільтрація за статусом, дедлайном
- Сортування за пріоритетом (по дедлайну)
- Зміна статусу запиту

**Закриття запиту:**
- При завершенні запиту - додавання компоненту на склад
- Автоматичне оновлення кількості

### 7. Історія та аналітика
**Базова аналітика:**
- Історія операцій (списання, додавання)
- ТОП найбільш використовуваних компонентів
- Звіт по закупівлях за період

## API Endpoints

### Компоненти
- `GET /api/items?category=components&page=1&search=&location=&filters={}`
- `POST /api/items`
- `PUT /api/items/:id`
- `DELETE /api/items/:id`
- `POST /api/items/:id/withdraw`

### Пресети  
- `GET /api/presets`
- `POST /api/presets`
- `PUT /api/presets/:id`
- `DELETE /api/presets/:id`
- `GET /api/presets/:id/check` - перевірка доступності компонентів
- `POST /api/presets/:id/withdraw` - масове списання

### Закупівлі
- `GET /api/purchase-requests`
- `POST /api/purchase-requests`
- `PUT /api/purchase-requests/:id/status`
- `POST /api/purchase-requests/:id/complete` - закриття з додаванням на склад

## UI/UX вимоги

### Дизайн
- Мінімалістичний Material Design або аналогічний
- Адаптивність (desktop first, але працює на планшетах)
- Кольорова схема: світлі тони з акцентами для статусів

### Зручність
- Швидкий доступ до основних функцій
- Автозбереження форм
- Підтвердження критичних операцій
- Toast повідомлення про успішні/неуспішні операції

## Технічні вимоги

### Розгортання
- `docker-compose.yml` з PostgreSQL та Node.js додатком
- Environment variables для конфігурації
- Автоматичні міграції бази при старті
- Seed data для тестування

### Безпека
- Базова аутентифікація (можна просто пароль для доступу)
- Валідація вхідних даних
- SQL injection захист
- CORS налаштування

### Продуктивність
- Індекси на часто використовувані поля
- Кешування статичних даних
- Пагінація для великих списків

## Додаткові можливості (опціонально)
- Експорт даних в Excel/CSV
- Backup/restore функціонал  
- QR коди для швидкого доступу до компонентів
- Нотифікації про критично низьку кількість компонентів
- API для інтеграції з іншими системами

## Структура проекту
```
project/
├── docker-compose.yml
├── backend/
│   ├── package.json
│   ├── server.js
│   ├── routes/
│   ├── models/
│   ├── migrations/
│   └── seeds/
├── frontend/
│   ├── index.html
│   ├── assets/css/
│   ├── assets/js/
│   └── assets/img/
└── README.md
```

## Пріоритетність розробки
1. Базова структура + база даних
2. CRUD операції для компонентів
3. Списання компонентів
4. Пресети та пошук по ним
5. Закупівлі
6. Поліпшення UI/UX
7. Додаткові функції